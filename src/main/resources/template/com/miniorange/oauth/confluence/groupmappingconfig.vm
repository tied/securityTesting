<html>
<head>

	#if($roleMapping.isEmpty())
		#set ($count = $existingGroups.size())
	#else
		#set ($count = $roleMapping.keySet().size())
	#end

	#set ($groups = $existingGroups)

	<meta name="decorator" content="atl.general"/>
	<script>
        #include("/js/groupmappingconfig.js");
		AJS.$(function () {
			AJS.$(".aui-nav li").removeClass("aui-nav-selected");
			AJS.$("#aui-uid-4").addClass("aui-nav-selected");
			var cnt = '$count';

			document.getElementById("idTotalNumberOfRoles").value = cnt + 1;

			AJS.$("#userGroupKey_0").auiSelect2({
				placeholder: 'Select the Confluence Group',
				ajax: {
					url: AJS.contextPath() + '/plugins/servlet/oauth/moapi',
					data: function (params) {
						var query = {
							search: params,
							action: 'fetchGroups'
						}
						// Query parameters will be ?search=[term]&type=public
						return query;
					},
					results: function (data, page) {
						return {
							results: data.results
						};
					},

				}
			});

			AJS.$("#userGroupKey_0").auiSelect2('data', {
				id: AJS.$("#userGroupKey_0").val(),
				text: AJS.$("#userGroupKey_0").val()
			});

			#set ($loopCount = 0)

			for (var i = 1; i < cnt; i++) {
				AJS.$("#userGroupKey_" + i).auiSelect2({
					placeholder: 'Select the Confluence Group',
					ajax: {
						url: AJS.contextPath() + '/plugins/servlet/oauth/moapi',
						data: function (params) {
							var query = {
								search: params,
								action: 'fetchGroups'
							}

							// Query parameters will be ?search=[term]&type=public
							return query;
						},
						results: function (data, page) {
							return {
								results: data.results
							};
						},

					}
				});
				AJS.$("#userGroupKey_" + i).auiSelect2('data', {
					id: AJS.$("#userGroupKey_" + i).val(),
					text: AJS.$("#userGroupKey_" + i).val()
				});

					#set ($loopCount = $loopCount+1);
			}


			AJS.$("#defaultGroups").auiSelect2({
				placeholder: 'Select the Default Confluence Groups',
				ajax: {
					url: AJS.contextPath() + '/plugins/servlet/oauth/moapi',
					data: function (params) {
						var query = {
							search: params,
							action: 'fetchGroups'
						}

						// Query parameters will be ?search=[term]&type=public
						return query;
					},
					results: function (data, page) {
						return {
							results: data.results
						};
					},

				},
				multiple: true
			});

			var defaultGroups = [];

			#foreach($group in $defaultGroupsList)
				var groupName = '$group';
				defaultGroups.push({
					"id": groupName,
					"text": groupName
				});
			#end


			AJS.$("#defaultGroups").auiSelect2('data', defaultGroups);

			AJS.$("#onTheFlyDoNotRemoveGroups").auiSelect2({
				placeholder: 'Select the Confluence Groups',
				ajax: {
					url: AJS.contextPath() + '/plugins/servlet/oauth/moapi',
					data: function (params) {
						var query = {
							search: params,
							action: 'fetchGroups'
						}

						// Query parameters will be ?search=[term]&type=public
						return query;
					},
					results: function (data, page) {
						return {
							results: data.results
						};
					},

				},
				multiple: true
			});

			var onTheFlyDoNotRemoveGroups = [];

			#foreach($group in $onTheFlyDoNotRemoveGroupsList)
				var groupName = '$group';
				onTheFlyDoNotRemoveGroups.push({
					"id": groupName,
					"text": groupName
				});
			#end

			AJS.$("#onTheFlyDoNotRemoveGroups").auiSelect2('data', onTheFlyDoNotRemoveGroups);
		});

		var counter = '$count';

		function GetDynamicTextBox(value) {
			var htmlElement = '<br/>' + '<input id = "userGroupKey_' + counter + '"  name = "userGroupKey_' + counter + '"  placeholder="Confluence Group" style="width:250px">'
					+ '</input> &nbsp&nbsp;'
					+ '<input id = "userGroupValue_' + counter + '" name = "userGroupValue_' + counter + '"  type="text" class="text" placeholder="Groups from IdP" style="width: 322px; vertical-align: bottom;margin-left: 5px;" value = "' + value + '" />' + '&nbsp&nbsp;'
					+ '<input type="button" value="-" class="aui-button aui-button-primary" style="vertical-align: bottom;margin-left: 2px;"  onclick = "RemoveTextBox(this,' + counter + ')" />'
			return htmlElement;
		}

		function RemoveTextBox(div, loopCount) {
			document.getElementById("roleMappingInnerContainer").removeChild(div.parentNode);
		}


		function AddTextBox(value) {
			var newField;
			for (newField = 0; newField < value; newField++) {
				var div = document.createElement('DIV');
				div.innerHTML = GetDynamicTextBox("");
				var roleMappingInnerContainer = document.getElementById("roleMappingInnerContainer");
				roleMappingInnerContainer.insertBefore(div, roleMappingInnerContainer.childNodes[0]);
				AJS.$("#userGroupKey_" + counter).auiSelect2({
					placeholder: 'Select the Confluence Group',
					ajax: {
						url: AJS.contextPath() + '/plugins/servlet/oauth/moapi',
						data: function (params) {
							var query = {
								search: params,
								action: 'fetchGroups'
							}

							// Query parameters will be ?search=[term]&type=public
							return query;
						},
						results: function (data, page) {
							return {
								results: data.results
							};
						},

					}
				});
				counter++;

				document.getElementById("idTotalNumberOfRoles").value = parseInt(document.getElementById("idTotalNumberOfRoles").value) + 1;
			}
		}


		function showMappingInstruction() {
			var value = document.getElementById("group-mapping-instructions-div");
			if (value.style.display === "none") {
				AJS.$('#group-mapping-instructions-div').show("slow");
			} else {
				AJS.$('#group-mapping-instructions-div').hide("slow");
			}
		}

		function showOnTheFlyMappingInstruction() {
			var value = document.getElementById("onthefly-group-mapping-instructions-div");
			if (value.style.display === "none") {
				AJS.$('#onthefly-group-mapping-instructions-div').show("slow");
			} else {
				AJS.$('#onthefly-group-mapping-instructions-div').hide("slow");
			}
		}

		function toggleRecommendations() {
			AJS.$("#group-mapping-recommendation").toggle(400);
		}

	</script>

	<style>

		.pill-nav {
			margin-top: 20px;
		}

		.pill-nav a {
			display: inline-block;
			color: black;
			text-align: center;
			padding: 14px;
			text-decoration: none;
			font-size: 15px;
			border-radius: 5px;
			background: #cec9c9;
		}

		.pill-nav a:hover {
			background-color: #ddd;
			color: black;
		}

		.pill-nav a.active {
			background-color: #0052cc;
			color: white;
		}
	</style>

</head>
<body>
	#parse("template/com/miniorange/oauth/confluence/header.vm")
<div class="tabs-pane active-pane" id="role-mapping" role="tabpanel">
	<p style="font-size:14pt;"> Configure User Groups Mapping</p>
	<div style="groupmapping-save-top:15px;margin-top: -25px;">
        <span style="margin-left:90%">
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
				<input id="submit0" type="button" class="aui-button aui-button-primary" style="width:100px;" value="Save"
					   onclick="document.forms['role-mapping-form'].submit();"/>
        </span>
	</div>
	<hr class="header"/>

	<form id="role-mapping-form" class="aui long-label" action="" method="POST">
		<input type="hidden" name="roleMappingSubmitted" id="role_mapping_submitted" value="true"/>
		<input type="hidden" name="atl_token" value="$xsrfToken" />
		<input type="hidden" name="totalNumberOfRoles" id="idTotalNumberOfRoles"/>

	#**<p>If users are managed in the External User Directory like LDAP/AD, Click <a href="userdirectoryinfo.action">here</a> to check the the Group Mapping behaviour of the Group Assignment of the plugin.</p>
	 <br/>*#

		<div class="field-group">
			<label for="restrictUserCreation" class="labelClass">Disable User Creation:</label>
			#if ($restrictUserCreation == true)
				<input class="checkbox" type="checkbox" name="restrictUserCreation" checked="true" value="true"
					   id="restrictUserCreation"/>
			#else
				<input class="checkbox" type="checkbox" name="restrictUserCreation" value="true"
					   id="restrictUserCreation"/>
			#end
			<span>New user will not be created only existing users will be able to login through SSO.</span>
		</div>

		<hr class="header"/>
		<h3>Default Group Configurations</h3>
		<br/>
		<div class="field-group">
			<label for="defaultGroups">Default Group:
				<span class="aui-icon icon-required">(required)</span>
			</label>

			<input class="select long-field" required name="defaultGroups" id="defaultGroups" style="width: 500px"></input>
			<div class="description">Select Default Group(s) to assign to <strong>New Users / All users</strong>. Select
				<b>None</b> to disable default group assignment.<br/>
				<a href="https://miniorange.atlassian.net/wiki/spaces/JSDoc/pages/1237417989/User+Directory+Information"  target="_blank" >Click here</a> for recommended default group settings for different user directory permission.
			</div>
		</div>

		<div id="defaultGroupSelect">
			<fieldset class="group" >
				<legend>
					<span>Assign Default Groups To:</span>
				</legend>
				#if($enableDefaultGroupsFor == "newUsers")
					<input type="radio" class="radio" id="newUsers"
						   name="enableDefaultGroupsFor" value="newUsers" checked="checked">
				#else
					<input type="radio" class="radio" id="newUsers"
						   name="enableDefaultGroupsFor" value="newUsers">
				#end
				<label for="newUsers">New Users</label>
				#if($enableDefaultGroupsFor == "allUsers")
					<input type="radio" class="radio" id="allUsers"
						   name="enableDefaultGroupsFor" value="allUsers" checked="checked">
				#else
					<input type="radio" class="radio" id="allUsers"
						   name="enableDefaultGroupsFor" value="allUsers">
				#end
				<label for="allUsers">All Users</label>
				#if($enableDefaultGroupsFor == "noUsers")
					<input type="radio" class="radio" id="noUsers"
						   name="enableDefaultGroupsFor" value="noUsers" checked="checked">
				#else
					<input type="radio" class="radio" id="noUsers"
						   name="enableDefaultGroupsFor" value="noUsers">
				#end
				<label for="doNotAssignDefaultGroup">None</label>
			</fieldset>

			<hr class="header"/>

			<h3>Group Mapping Configurations</h3>
			<br/>
			<div class="aui-message aui-message-info">
				Group Mapping can be configured in one of the following two ways.
				<a id="group-mapping-recommendation-link" onclick="toggleRecommendations()" style="cursor: pointer">Click here</a> to know which group mapping configuration you should use.
				<div id="group-mapping-recommendation" style="display:none">
					<ol>
						<li>
							If the names of groups in Confluence are different than the corresponding groups in Application, then you should use <strong>Manual group mapping</strong>.
						</li>
						<li>
							If the names of groups in Confluence and Application are same, you should use <strong>On-The-Fly group mapping</strong>.
						</li>
					</ol>
				</div>
				<!-- <p><a href="userdirectoryinfo.action" target="_blank">Click here</a> for recommended group mapping settings for different primary user directory permissions.
                 </p>-->
			</div>
			<p class="aui-message aui-message-info">Don't want to map groups? Enable <b>Disable group mapping</b>, save and skip to <a href="signinoptions.action">SSO
				Settings</a></p>

			<div class="pill-nav">
				<a id="group-mapping-pill" style="cursor: pointer"
				   #if ($onTheFlyGroupCreation == false)class="active" #end>Manual Group Mapping</a>
				<a id="on-the-fly-group-mapping-pill" style="cursor: pointer"
				   #if ($onTheFlyGroupCreation == true)class="active" #end>On-The Fly Group Mapping</a>
			</div>

			<input type="hidden" name="onTheFlyGroupCreation" id="onTheFlyGroupCreation"
				   value="$onTheFlyGroupCreation"/>
			<div class="aui-message aui-message-info">
				<p id="group-mapping-main-inst" class="title">Group Mapping allows you to map your 's groups to your
					Confluence groups. You can follow <a id="group-mapping-instructions" onclick="showMappingInstruction()"
														 style="cursor:pointer">these steps</a> for Group Mapping.</p>
				<p id="on-the-fly-group-mapping-main-inst" class="title">Users will be assigned to Groups in Confluence
					whose group name is same as groups from Application. If the Group doesn't exists in Confluence then it will
					be created.
					<br/>
					You can follow <a id="onthefly-group-mapping-instructions"
									  onclick="showOnTheFlyMappingInstruction()" style="cursor:pointer">these steps</a>
					for On-The-Fly Group Mapping.</p>

				<div id="group-mapping-instructions-div" style="display:none" class="aui-message aui-message-info">
					<ol>
						<li>Go to <a href="configure.action">Configure OAuth</a> and click on Test Configuration.</li>
						<li>Copy the <i>Attribute Name</i> against the group value and enter in <i>Group Attribute</i>
							textbox
							below.
						</li>
						<li>Against the Confluence group given below, enter the name of the group(s) whose users should be
							added in that Conflunece group.
						</li>
						<li>Click on '+1' button to add a new row and '+10' button to add 10 new rows for mapping groups
						</li>
						<li>
							You can remove a row by clicking on '-' button. All the unmapped groups will be removed automatically on saving the settings
						</li>
					</ol>
				</div>
				<div id="onthefly-group-mapping-instructions-div" style="display:none">
					<ol>
						<li>Go to <a href="configure.action">Configure OAuth</a> and click on Test Configuration.</li>
						<li>Copy the <i>Attribute Name</i> against the group value and enter in <i>Group Attribute</i>
							textbox
							below.
						</li>
						<li>If the user is part of some group in Confluence and that group is not present in OAuth response returned by Application, then the user will be removed from that group in Confluence.
						</li>

						<li>If you don't want On-The-Fly group mapping to affect Confluence groups which are managed locally (for eg. confluence-users, confluence-administrator), than add those groups in Exclude Groups field</li>
					</ol>
				</div>
			</div>

			<div class="field-group">
				<label for="keepExistingUserRoles">Disable Group Mapping:</label>
				#if($keepExistingUserRoles == true)
					<input class="checkbox" type="checkbox" name="keepExistingUserRoles" checked="true" value="true"
						   id="keepExistingUserRoles"/>
				#else
					<input class="checkbox" type="checkbox" name="keepExistingUserRoles" value="true"
						   id="keepExistingUserRoles"/>
				#end
				<span>Do not update groups of existing users.</span>
			</div>


			<div class="field-group">
				<label for="roleAttribute">Group Attribute:
				</label>
				<input type="text" id="roleAttribute" name="roleAttribute" placeholder="Enter the Group attribute name."
					   value="$roleAttribute" class="text long-field"/>
				<div class="description">Enter the Attribute Name that contains Groups of the User.
					You can also configure subgroups using the pattern as <b>group_name[*].sub_group_name</b>.</div>
			</div>

			<div id="onTheFlyCreateNewGroupsDiv">
				<div class="field-group">
					<label>Filter Groups:</label>
					<select class="select" id="onTheFlyFilterIDPGroupsOption" name="onTheFlyFilterIDPGroupsOption" style="width:225px;">
						#foreach($option in $groupFilterOptionsList)
						<option value="$option"
							#if($option.equals($onTheFlyFilterIDPGroupsOption))
								selected
							#end>$option</option>
						#end
					</select>&nbsp&nbsp&nbsp&nbsp&nbsp

					<input type="text" placeholder="Enter filter/regex pattern" class="text" value="$onTheFlyFilterIDPGroupsKey"
						   name="onTheFlyFilterIDPGroupsKey" id="onTheFlyFilterIDPGroupsKey" #if($onTheFlyFilterIDPGroupsOption.equals("None")) style="display:none;" #end >
					&nbsp&nbsp&nbsp&nbsp&nbsp

					<input type="button" class="button" id="checkGroupRegex" value="Test Regex"
						   #if(!$onTheFlyFilterIDPGroupsOption.equals("Regex")) style="display:none" #end #if($onTheFlyFilterIDPGroupsKey.equals("")) disabled #end>

					<div class="description">Select how you want to <b>filter groups</b> received from the IDP.</div>
					<div class="description" id="onTheFlyGroupRegexDescription" #if(!$onTheFlyFilterIDPGroupsOption.equals("Regex")) style="display:none" #end>
					    If you have configured regex pattern as <b>dev.*</b> and you received 3 groups (dev-1, dev-2 and testers) from IDP, <br>
					    then only the groups matching the regex pattern will be considered (dev-1 and dev-2).
                    </div>
				</div>
				<br>
        <div id="onTheFlyGroupRegexDiv">
            <div class="field-group">
                #if($groupRegexPatternEnabled == true)
                <input class="checkbox" type="checkbox" name="groupRegexPatternEnabled" checked="true" value="true" id="groupRegexPatternEnabled"/>
                #else
                <input class="checkbox" type="checkbox" name="groupRegexPatternEnabled" value="true" id="groupRegexPatternEnabled"/>
                #end
                <span> Apply regular expression on <strong>Group Name</strong>.</span>
            </div>
            <div class="field-group" id="groupRegexfield">
                <div>
                    <label for="regexPatternForGroup">Replace</label>
                    <input type="text medium-field" id="regexPatternForGroup" name="regexPatternForGroup" value="$regexPatternForGroup"
                           placeholder="Regular Expression" class="text long-field" style="width: 150px"/>&nbsp;&nbsp;&nbsp;&nbsp;
                    <label for="regexGroups">With</label>
                    <input  type="text medium-field" id="regexGroups"  name="regexGroups" value="$regexGroups"
                            placeholder="Replace With" class="text long-field" style="width: 150px"/>
                </div><br>
                <div style = "padding-left: 53px">
                    <input type="text" id="testGroupRegex" name="testRegex" value="$testRegex" placeholder="Group Name to Test Regex " class="text long-field" style="width:210px;" />&nbsp;&nbsp
                    <input type="button" id="test-group-regex" value="Test Group Regex" class="aui-button" style="width:130px;" />
                </div>
                <div class="description">Enter the regular expression here. It will be applied on value for group
                    Name provided in the field.<br>
                    For example, you can use regular expression <b>(.*):group:(.*)#</b> and replacement <b>$2</b> to extract <b>confluence-software-users</b> from groupName
                    <b>urn:group:confluence-software-users#idp</b>
            </div>
                <br>
            </div>
        </div>


				<div class="field-group">
					<label for="createNewGroups">Create New Groups:</label>
					#if($createNewGroups == true)
						<input class="checkbox" type="checkbox" name="createNewGroups" checked="true" value="true" id="createNewGroups"/>
					#else
						<input class="checkbox" type="checkbox" name="createNewGroups" value="true" id="createNewGroups"/>
					#end
					<span>Create new groups coming from Application if the group does not already exist in Confluence.</span>
				</div>

				<div class="field-group" id="onTheFlyAssignNewGroupsOnlyDiv">
					<label for="onTheFlyAssignNewGroupsOnly" class="labelClass">Keep Existing Users Groups</label>
					#if ($onTheFlyAssignNewGroupsOnly == true)
						<input class="checkbox" type="checkbox" name="onTheFlyAssignNewGroupsOnly" checked="true" value="true"
							   id="onTheFlyAssignNewGroupsOnly"/>
					#else
						<input class="checkbox" type="checkbox" name="onTheFlyAssignNewGroupsOnly" value="true"
							   id="onTheFlyAssignNewGroupsOnly"/>
					#end
					<span>New groups will be assigned but user's existing groups will be not be affected.</span>
				</div>

				<div class="field-group" id="onTheFlyDoNotRemoveGroupsDiv" style="display: none">
					<label>Exclude Groups:</label>
					<input class="aui" id="onTheFlyDoNotRemoveGroups" name="onTheFlyDoNotRemoveGroups"
						   style="width: 500px"> </input>
					<div class="description">Do not remove user from these groups after SSO.</div>
				</div>
			</div>

			<div id="groupMappingDiv">
				<div class="field-group">
					<label for="createUsersIfRoleMapped">Restrict User Creation based on Group Mapping:</label>
					#if($createUsersIfRoleMapped == true)
						<input class="checkbox" type="checkbox" name="createUsersIfRoleMapped" checked="true"
							   value="true" id="createUsersIfRoleMapped"/>
					#else
						<input class="checkbox" type="checkbox" name="createUsersIfRoleMapped" value="true"
							   id="createUsersIfRoleMapped"/>
					#end
					<span>If checked, users will be created only if groups are mapped.</span>
                    <div class="description aui-message aui-message-info"> User creation will not work for read only directories by default, <a href="https://miniorange.atlassian.net/wiki/spaces/JSDoc/pages/1237417989/User+Directory+Information" target="_blank">Click here</a> to know more.</div>

				</div>

				<div class="field-group" id="roleMappingContainer" name="roleMappingContainer">
					<span style="margin-right: 14px; font-weight: 600;">Add Groups</span>

					<input type='button' value='+' id='addGroupAttr' class="aui-button aui-button-primary"
						   onclick="AddTextBox(1)">
					<input type='button' value='+10' id='add10GroupAttr' class="aui-button aui-button-primary"
						   onclick="AddTextBox(10)">
					<div class="description">
						By default first 50 groups will shown for mapping and you can add more using <b>"+"</b> or <b>"+10"</b> buttons. All unmapped groups will be removed on saving the configuration.
					</div>

					<div id="roleMappingInnerContainer" name="roleMappingInnerContainer">
						#set ($loopCount = 0)
						#if($roleMapping.isEmpty())
							#foreach($group in $existingGroups)
								#if($loopCount == 50)
									#break
								#end
								<div>
									<br/>
									<input name="userGroupKey_$loopCount" id="userGroupKey_$loopCount"
										   placeholder="Confluence Group" class="groupmapping" style="width:250px"
										   value="$group">
									</input>&nbsp&nbsp;
									<input type="text" id="userGroupValue_$loopCount" style="vertical-align:bottom"
										   name="userGroupValue_$loopCount" value="" placeholder="Groups from Application"
										   class="text"/>&nbsp&nbsp;
									<input type="button" value="-" style="vertical-align:bottom"
										   class="aui-button aui-button-primary"
										   onclick="RemoveTextBox(this, $loopCount)"/>
									#set ($loopCount = $loopCount+1)
								</div>
							#end
						#else
							#foreach($key in $roleMapping.keySet())
								<div>
									<br/>
									<input name="userGroupKey_$loopCount" id="userGroupKey_$loopCount"
										   placeholder="Confluence Group" class="groupmapping" style="width:250px"
										   value="$key">

									</input>&nbsp&nbsp;
									<input type="text" id="userGroupValue_$loopCount" style="vertical-align:bottom"
										   name="userGroupValue_$loopCount" value="$roleMapping.get($key)"
										   placeholder="Groups from Application" class="text"/>&nbsp&nbsp;
									<input type="button" value="-" style="vertical-align:bottom"
										   class="aui-button aui-button-primary"
										   onclick="RemoveTextBox(this, $loopCount)"/>
									#set ($loopCount = $loopCount+1)
								</div>
							#end
						#end
					</div>

				</div>
			</div>
			<br/>
			<div class="field-group">
				<input type="submit" value="Save" class="aui-button aui-button-primary" style="width:100px;" />&nbsp;&nbsp;&nbsp;
				<a href="signinoptions.action"><input type="button" value="Next" class="aui-button aui-button-primary"
													  style="width:100px;"/></a>&nbsp;&nbsp;&nbsp;
				<a href="configure.action" style="width:300px;">Back to configuration</a>
			</div>
	</form>
</div>
</div>
</section>
</div>
</div>
</body>
</html>